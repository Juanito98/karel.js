/* parser generated by jison 0.4.2 */
var karelruby = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"def_list":4,"expr_list":5,"EOF":6,"def":7,"NEWLINE":8,"DEF":9,"line":10,"var":11,"END":12,"(":13,")":14,"expr":15,"FORWARD":16,"LEFT":17,"PICKBUZZER":18,"LEAVEBUZZER":19,"HALT":20,"call":21,"repeat":22,"cond":23,"loop":24,"IF":25,"term":26,"ELSE":27,"WHILE":28,"integer":29,"TIMES":30,"non_var_integer":31,"OR":32,"and_term":33,"AND":34,"not_term":35,"NOT":36,"clause":37,"IFZ":38,"bool_fun":39,"IFNFWALL":40,"IFFWALL":41,"IFNLWALL":42,"IFLWALL":43,"IFNRWALL":44,"IFRWALL":45,"IFWBUZZER":46,"IFNWBUZZER":47,"IFBBUZZER":48,"IFNBBUZZER":49,"IFW":50,"IFN":51,"IFS":52,"IFE":53,"IFNW":54,"IFNN":55,"IFNS":56,"IFNE":57,"NUM":58,"INC":59,"DEC":60,"VAR":61,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"NEWLINE",9:"DEF",12:"END",13:"(",14:")",16:"FORWARD",17:"LEFT",18:"PICKBUZZER",19:"LEAVEBUZZER",20:"HALT",25:"IF",27:"ELSE",28:"WHILE",30:"TIMES",32:"OR",34:"AND",36:"NOT",38:"IFZ",40:"IFNFWALL",41:"IFFWALL",42:"IFNLWALL",43:"IFLWALL",44:"IFNRWALL",45:"IFRWALL",46:"IFWBUZZER",47:"IFNWBUZZER",48:"IFBBUZZER",49:"IFNBBUZZER",50:"IFW",51:"IFN",52:"IFS",53:"IFE",54:"IFNW",55:"IFNN",56:"IFNS",57:"IFNE",58:"NUM",59:"INC",60:"DEC",61:"VAR"},
productions_: [0,[3,3],[3,2],[4,3],[4,2],[7,6],[7,9],[5,3],[5,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[23,6],[23,9],[24,6],[21,1],[21,4],[22,6],[22,6],[26,3],[26,1],[33,3],[33,1],[35,2],[35,1],[37,4],[37,1],[37,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[29,1],[29,1],[31,1],[31,4],[31,4],[11,1],[10,0]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    	var program = $$[$0-1].concat([['LINE', yylineno], ['HALT']]);
    	var functions = {};
    	
    	for (var i = 0; i < $$[$0-2].length; i++) {
    		if (functions[$$[$0-2][i][0]]) {
    			throw "Function redefinition: " + $$[$0-2][i][0];
    		}
    		
    		functions[$$[$0-2][i][0]] = program.length;
    		program = program.concat($$[$0-2][i][1]);
    	}
    	
    	for (var i = 0; i < program.length; i++) {
    		if (program[i][0] == 'CALL') {
    			if (!functions[program[i][1]]) {
    				throw "Unknown function: " + program[i][1];
    			}
    			
    			program[i].push(program[i][1]);
    			program[i][1] = functions[program[i][2]];
    		} else if (program[i][0] == 'PARAM' && program[i][1] != 0) {
			throw "Unknown variable: " + program[i][1];
    		}
    	}
    	
    	return program;
    
break;
case 2: return $$[$0-1].concat([['HALT']]); 
break;
case 3: this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 4: this.$ = $$[$0-1]; 
break;
case 5: this.$ = [[$$[$0-3], $$[$0-4].concat($$[$0-1]).concat([['RET']])]]; 
break;
case 6:
    	var result = $$[$0-7].concat($$[$0-1]).concat([['RET']]);
    	for (var i = 0; i < result.length; i++) {
    		if (result[i][0] == 'PARAM') {
    			if (result[i][1] == $$[$0-4]) {
    				result[i][1] = 0;
    			} else {
				throw "Unknown variable: " + $$[$0-4];
    			}
    		}
    	}
    	this.$ = [[$$[$0-6], result]];
    
break;
case 7: this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 8: this.$ = $$[$0-1]; 
break;
case 9: this.$ = [['LINE', yylineno], ['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT'], ['EZ', 'WALL'], ['FORWARD']]; 
break;
case 10: this.$ = [['LINE', yylineno], ['LEFT']]; 
break;
case 11: this.$ = [['LINE', yylineno], ['WORLDBUZZERS'], ['EZ', 'WORLDUNDERFLOW'], ['PICKBUZZER']]; 
break;
case 12: this.$ = [['LINE', yylineno], ['BAGBUZZERS'], ['EZ', 'BAGUNDERFLOW'], ['LEAVEBUZZER']]; 
break;
case 13: this.$ = [['LINE', yylineno], ['HALT']]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = $$[$0-3].concat($$[$0-4]).concat([['JZ', $$[$0-1].length]]).concat($$[$0-1]); 
break;
case 19: this.$ = $$[$0-6].concat($$[$0-7]).concat([['JZ', 1 + $$[$0-4].length]]).concat(r).concat([['JMP', $$[$0-1].length]]).concat($$[$0-1]); 
break;
case 20: this.$ = $$[$0-3].concat($$[$0-4]).concat([['JZ', 1 + $$[$0-1].length]]).concat($$[$0-1]).concat([['JMP', -1 -($$[$0-3].length + 1 + $$[$0-1].length + 1)]]); 
break;
case 21: this.$ = [['LINE', yylineno], ['LOAD', 0], ['CALL', $$[$0]], ['LINE', yylineno]]; 
break;
case 22: this.$ = [['LINE', yylineno]].concat($$[$0-1]).concat([['CALL', $$[$0-3]], ['LINE', yylineno]]); 
break;
case 23: this.$ = $$[$0-5].concat($$[$0-3]).concat([['DUP'], ['JLEZ', $$[$0-1].length + 2]]).concat($$[$0-1]).concat([['DEC'], ['JMP', -1 -($$[$0-1].length + 4)], ['POP']]); 
break;
case 24: this.$ = $$[$0-5].concat($$[$0-3]).concat([['DUP'], ['JLEZ', $$[$0-1].length + 2]]).concat($$[$0-1]).concat([['DEC'], ['JMP', -1 -($$[$0-1].length + 4)], ['POP']]); 
break;
case 25: this.$ = $$[$0-2].concat($$[$0]).concat([['OR']]); 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0-2].concat($$[$0]).concat([['AND']]); 
break;
case 28: this.$ = $$[$0]; 
break;
case 29: this.$ = $$[$0].concat([['NOT']]); 
break;
case 30: this.$ = $$[$0]; 
break;
case 31: this.$ = $$[$0-1].concat([['NOT']]); 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = $$[$0-1]; 
break;
case 34: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 35: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND']]; 
break;
case 36: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 37: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND']]; 
break;
case 38: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 39: this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND']]; 
break;
case 40: this.$ = [['WORLDBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 41: this.$ = [['WORLDBUZZERS'], ['NOT']]; 
break;
case 42: this.$ = [['BAGBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 43: this.$ = [['BAGBUFFERS'], ['NOT']]; 
break;
case 44: this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ']]; 
break;
case 45: this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ']]; 
break;
case 46: this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ']]; 
break;
case 47: this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ']]; 
break;
case 48: this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 49: this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ'], ['NOT']]; 
break;
case 50: this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ'], ['NOT']]; 
break;
case 51: this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ'], ['NOT']]; 
break;
case 52: this.$ = [['PARAM', $$[$0]]]; 
break;
case 53: this.$ = $$[$0]; 
break;
case 54: this.$ = [['LOAD', parseInt(yytext)]]; 
break;
case 55: this.$ = $$[$0-1].concat([['INC']]); 
break;
case 56: this.$ = $$[$0-1].concat([['DEC']]); 
break;
case 57: this.$ = yytext; 
break;
case 58: this.$ = [['LINE', yylineno]]; 
break;
}
},
table: [{3:1,4:2,5:3,7:4,9:[1,6],11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{1:[3]},{5:24,7:25,9:[1,6],11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{6:[1,26],11:16,15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[1,28]},{8:[1,29]},{10:30,61:[2,58]},{8:[2,9]},{8:[2,10]},{8:[2,11]},{8:[2,12]},{8:[2,13]},{8:[2,14]},{8:[2,15]},{8:[2,16]},{8:[2,17]},{8:[2,21],13:[1,31],30:[1,32]},{30:[1,33]},{10:34,13:[2,58],36:[2,58],38:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58]},{10:35,13:[2,58],36:[2,58],38:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58]},{8:[2,57],13:[2,57],14:[2,57],30:[2,57]},{14:[2,54],30:[2,54]},{13:[1,36]},{13:[1,37]},{6:[1,38],11:16,15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[1,39]},{1:[2,2]},{8:[1,40]},{9:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],25:[2,4],28:[2,4],58:[2,4],59:[2,4],60:[2,4],61:[2,4]},{6:[2,8],12:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],25:[2,8],27:[2,8],28:[2,8],58:[2,8],59:[2,8],60:[2,8],61:[2,8]},{11:41,61:[1,20]},{11:43,29:42,31:44,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[2,58],10:45},{8:[2,58],10:46},{13:[1,54],26:47,33:48,35:49,36:[1,50],37:51,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{13:[1,54],26:73,33:48,35:49,36:[1,50],37:51,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{11:43,29:74,31:44,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:43,29:75,31:44,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{1:[2,1]},{9:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],25:[2,3],28:[2,3],58:[2,3],59:[2,3],60:[2,3],61:[2,3]},{6:[2,7],12:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],25:[2,7],27:[2,7],28:[2,7],58:[2,7],59:[2,7],60:[2,7],61:[2,7]},{8:[1,76],13:[1,77]},{14:[1,78]},{14:[2,52]},{14:[2,53]},{8:[1,79]},{8:[1,80]},{8:[1,81],32:[1,82]},{8:[2,26],14:[2,26],32:[2,26],34:[1,83]},{8:[2,28],14:[2,28],32:[2,28],34:[2,28]},{13:[1,54],37:84,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{8:[2,30],14:[2,30],32:[2,30],34:[2,30]},{13:[1,85]},{8:[2,32],14:[2,32],32:[2,32],34:[2,32]},{13:[1,54],26:86,33:48,35:49,36:[1,50],37:51,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{8:[2,34],14:[2,34],32:[2,34],34:[2,34]},{8:[2,35],14:[2,35],32:[2,35],34:[2,35]},{8:[2,36],14:[2,36],32:[2,36],34:[2,36]},{8:[2,37],14:[2,37],32:[2,37],34:[2,37]},{8:[2,38],14:[2,38],32:[2,38],34:[2,38]},{8:[2,39],14:[2,39],32:[2,39],34:[2,39]},{8:[2,40],14:[2,40],32:[2,40],34:[2,40]},{8:[2,41],14:[2,41],32:[2,41],34:[2,41]},{8:[2,42],14:[2,42],32:[2,42],34:[2,42]},{8:[2,43],14:[2,43],32:[2,43],34:[2,43]},{8:[2,44],14:[2,44],32:[2,44],34:[2,44]},{8:[2,45],14:[2,45],32:[2,45],34:[2,45]},{8:[2,46],14:[2,46],32:[2,46],34:[2,46]},{8:[2,47],14:[2,47],32:[2,47],34:[2,47]},{8:[2,48],14:[2,48],32:[2,48],34:[2,48]},{8:[2,49],14:[2,49],32:[2,49],34:[2,49]},{8:[2,50],14:[2,50],32:[2,50],34:[2,50]},{8:[2,51],14:[2,51],32:[2,51],34:[2,51]},{8:[1,87],32:[1,82]},{14:[1,88]},{14:[1,89]},{5:90,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:91,61:[1,20]},{8:[2,22]},{5:92,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{5:93,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{5:94,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{13:[1,54],33:95,35:49,36:[1,50],37:51,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{13:[1,54],35:96,36:[1,50],37:51,38:[1,52],39:53,40:[1,55],41:[1,56],42:[1,57],43:[1,58],44:[1,59],45:[1,60],46:[1,61],47:[1,62],48:[1,63],49:[1,64],50:[1,65],51:[1,66],52:[1,67],53:[1,68],54:[1,69],55:[1,70],56:[1,71],57:[1,72]},{8:[2,29],14:[2,29],32:[2,29],34:[2,29]},{11:43,29:97,31:44,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{14:[1,98],32:[1,82]},{5:99,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{14:[2,55],30:[2,55]},{14:[2,56],30:[2,56]},{11:16,12:[1,100],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{14:[1,101]},{11:16,12:[1,102],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:16,12:[1,103],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:16,12:[1,104],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],27:[1,105],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[2,25],14:[2,25],32:[2,25],34:[1,83]},{8:[2,27],14:[2,27],32:[2,27],34:[2,27]},{14:[1,106]},{8:[2,33],14:[2,33],32:[2,33],34:[2,33]},{11:16,12:[1,107],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[2,5]},{8:[1,108]},{8:[2,23]},{8:[2,24]},{8:[2,18]},{8:[1,109]},{8:[2,31],14:[2,31],32:[2,31],34:[2,31]},{8:[2,20]},{5:110,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{5:111,11:16,15:5,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:16,12:[1,112],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{11:16,12:[1,113],15:27,16:[1,7],17:[1,8],18:[1,9],19:[1,10],20:[1,11],21:12,22:13,23:14,24:15,25:[1,18],28:[1,19],31:17,58:[1,21],59:[1,22],60:[1,23],61:[1,20]},{8:[2,6]},{8:[2,19]}],
defaultActions: {7:[2,9],8:[2,10],9:[2,11],10:[2,12],11:[2,13],12:[2,14],13:[2,15],14:[2,16],15:[2,17],26:[2,2],38:[2,1],43:[2,52],44:[2,53],78:[2,22],100:[2,5],102:[2,23],103:[2,24],104:[2,18],107:[2,20],112:[2,6],113:[2,19]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 8; 
break;
case 1:/* ignore */
break;
case 2:/* ignore */
break;
case 3: return 9; 
break;
case 4: return 20; 
break;
case 5: return 17; 
break;
case 6: return 16; 
break;
case 7: return 18; 
break;
case 8: return 19; 
break;
case 9: return 12; 
break;
case 10: return 30; 
break;
case 11: return 28; 
break;
case 12: return 60; 
break;
case 13: return 59; 
break;
case 14: return 38; 
break;
case 15: return 40; 
break;
case 16: return 41; 
break;
case 17: return 42; 
break;
case 18: return 43; 
break;
case 19: return 44; 
break;
case 20: return 45; 
break;
case 21: return 46; 
break;
case 22: return 47; 
break;
case 23: return 48; 
break;
case 24: return 49; 
break;
case 25: return 51; 
break;
case 26: return 52; 
break;
case 27: return 53; 
break;
case 28: return 50; 
break;
case 29: return 55; 
break;
case 30: return 56; 
break;
case 31: return 57; 
break;
case 32: return 54; 
break;
case 33: return 27; 
break;
case 34: return 25; 
break;
case 35: return 36; 
break;
case 36: return 32; 
break;
case 37: return 32; 
break;
case 38: return 34; 
break;
case 39: return 13; 
break;
case 40: return 14; 
break;
case 41: return 'DOT'; 
break;
case 42: return 58; 
break;
case 43: return 61; 
break;
case 44: return 6; 
break;
}
},
rules: [/^(?:\n\s*)/,/^(?:[ \t]+)/,/^(?:#[^\n]*\n\s*)/,/^(?:def\b)/,/^(?:apagate\b)/,/^(?:gira-izquierda\b)/,/^(?:avanza\b)/,/^(?:coge-zumbador\b)/,/^(?:deja-zumbador\b)/,/^(?:fin\b)/,/^(?:veces\b)/,/^(?:mientras\b)/,/^(?:precede\b)/,/^(?:sucede\b)/,/^(?:si-es-cero\b)/,/^(?:frente-libre\b)/,/^(?:frente-bloqueado\b)/,/^(?:izquierda-libre\b)/,/^(?:izquierda-bloqueada\b)/,/^(?:derecha-libre\b)/,/^(?:derecha-bloqueada\b)/,/^(?:junto-a-zumbador\b)/,/^(?:no-junto-a-zumbador\b)/,/^(?:algun-zumbador-en-la-mochila\b)/,/^(?:ningun-zumbador-en-la-mochila\b)/,/^(?:orientado-al-norte\b)/,/^(?:orientado-al-sur\b)/,/^(?:orientado-al-este\b)/,/^(?:orientado-al-oeste\b)/,/^(?:no-orientado-al-norte\b)/,/^(?:no-orientado-al-sur\b)/,/^(?:no-orientado-al-este\b)/,/^(?:no-orientado-al-oeste\b)/,/^(?:sino\b)/,/^(?:si\b)/,/^(?:no\b)/,/^(?:o\b)/,/^(?:u\b)/,/^(?:y\b)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z][a-zA-Z0-9-]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = karelruby;
exports.Parser = karelruby.Parser;
exports.parse = function () { return karelruby.parse.apply(karelruby, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}